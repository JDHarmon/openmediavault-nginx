#!/bin/sh
#
# Copyright (C) 2014 OpenMediaVault Plugin Developers
#
# This file is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# any later version.
#
# This file is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this file. If not, see <http://www.gnu.org/licenses/>.

set -e

. /etc/default/openmediavault
. /usr/share/openmediavault/scripts/helper-functions

OMV_PLUGIN_XPATH=//services/nginx
OMV_NGINX_SERVERS_XPATH=${OMV_PLUGIN_XPATH}/servers
OMV_NGINX_SERVER_XPATH=${OMV_NGINX_SERVERS_XPATH}/server

# php-fpm paths
PHP_FPM_POOL_DIR=/etc/php5/fpm/pool.d/

generate_fpm_config()
{
	xpath=${1}
	echo 
    uuid=$(omv_config_get "${xpath}/uuid")
    config="${PHP_FPM_POOL_DIR}/${uuid}.conf"

    # PHP variables
    php_user=$(omv_config_get "${xpath}/php_user")
    php_display_errors=$(omv_config_get "${xpath}/php_display_errors")
    php_html_errors=$(omv_config_get "${xpath}/php_html_errors")
    php_max_execution_time=$(omv_config_get "${xpath}/php_max_execution_time")
    php_memory_limit=$(omv_config_get "${xpath}/php_memory_limit")
    php_post_max_size=$(omv_config_get "${xpath}/php_post_max_size")
    php_upload_max_filesize=$(omv_config_get "${xpath}/php_upload_max_filesize")

    php_display_errors=$(booleanToOnOff ${php_display_errors})
    php_html_errors=$(booleanToOnOff ${php_html_errors})

    if [ $php_memory_limit -gt -1 ]; then
        php_memory_limit=${php_memory_limit}M
    fi

    cat <<EOF > ${config}
[${uuid}]
listen = /var/run/fpm-${uuid}.sock
listen.owner = www-data
listen.mode = 0600
user = ${php_user}
group = www-data
pm = dynamic
pm.max_children = 5
pm.start_servers = 2
pm.min_spare_servers = 1
pm.max_spare_servers = 3

; php.ini
php_flag[display_errors] = ${php_display_errors}
php_flag[html_errors] = ${php_html_errors}
php_value[max_execution_time] = ${php_max_execution_time}
php_value[memory_limit] = ${php_memory_limit}
php_value[post_max_size] = ${php_post_max_size}M
php_value[upload_max_filesize] = ${php_upload_max_filesize}M

EOF

    xmlstarlet sel -t -m "${xpath}" \
        -i "string-length(php_extra_options) > 0" \
            -o "; extra options" -n \
            -v php_extra_options -n \
        -b \
        ${OMV_CONFIG_FILE} | xmlstarlet unesc >> ${config}
}

booleanToOnOff()
{
    if [ ${1} -eq 1 ]; then
        echo "On"
    else
        echo "Off"
    fi
}

remove_fpm_configurations()
{
    /usr/bin/find ${PHP_FPM_POOL_DIR} -type f -regextype sed -regex ".*/[a-f0-9\-]\{36\}.*" -exec rm {} \;
}

remove_fpm_configurations

if [ "$(omv_config_get "${OMV_PLUGIN_XPATH}/enable")" -eq "1" ]; then

    # Iterate through enabled servers
    server_count=$(omv_config_get_count "${OMV_NGINX_SERVER_XPATH}[enable = '1' and php_enable = '1']")
    index=1

    while [ $index -lt $server_count -o $index -eq $server_count ]; do

        current_server_xpath="${OMV_NGINX_SERVER_XPATH}[enable = '1' and php_enable = '1' and position()=${index}]"
        generate_fpm_config "${current_server_xpath}"

        index=$(( ${index} + 1 ))

    done
fi

exit 0
